diff --git a/node_modules/react-native-reanimated/react-native-reanimated.d.ts b/node_modules/react-native-reanimated/react-native-reanimated.d.ts
index 70ebafa..d78da4a 100644
--- a/node_modules/react-native-reanimated/react-native-reanimated.d.ts
+++ b/node_modules/react-native-reanimated/react-native-reanimated.d.ts
@@ -186,7 +186,8 @@ declare module 'react-native-reanimated' {
         : S[K] extends object
           ? AnimateStyle<S[K]>
           :
-              | S[K]
+              // allow `number` where `string` normally is to support colors
+                S[K] extends (string | undefined) ? S[K] | number : S[K]
               | AnimatedNode<
                   // allow `number` where `string` normally is to support colors
                   S[K] extends (string | undefined) ? S[K] | number : S[K]
@@ -387,16 +388,16 @@ declare module 'react-native-reanimated' {
     export function withTiming(
       toValue: number,
       userConfig?: WithTimingConfig,
-      callback?: (isCancelled: boolean) => void,
+      callback?: (isFinished: boolean) => void,
     ): number;
     export function withSpring(
       toValue: number,
       userConfig?: WithSpringConfig,
-      callback?: (isCancelled: boolean) => void,
+      callback?: (isFinished: boolean) => void,
     ): number;
     export function withDecay(
       userConfig: WithDecayConfig,
-      callback?: (isCancelled: boolean) => void
+      callback?: (isFinished: boolean) => void
     ): number;
     export function cancelAnimation<T extends SharedValue<SharedValueType>>(
         sharedValue: T
@@ -425,29 +426,37 @@ declare module 'react-native-reanimated' {
     export function runOnUI<A extends any[], R>(fn: (...args: A) => R): (...args: Parameters<typeof fn>) => void;
     export function processColor(color: number | string): number;
 
+    type Dependencies = any[];
+
     // reanimated2 hooks
     export function useSharedValue<T>(
         initialValue: T
     ): T extends SharedValueType ? SharedValue<T> : never;
 
     export function useDerivedValue<T extends SharedValueType>(
-      processor: () => T
+      processor: () => T,
+      dependencies?: Dependencies,
     ): SharedValue<T>;
 
     export function useAnimatedStyle<T extends StyleProp<AnimateStyle<ViewStyle | ImageStyle | TextStyle>>>(
-      updater: () => T
+      updater: () => T,
+      dependencies?: Dependencies,
     ): T;
     export function useAnimatedProps<T extends {}>(
-      updater: () => T
+      updater: () => T,
+      dependencies?: Dependencies,
     ): T;
     export function useAnimatedGestureHandler<TContext extends Context>(
-      handlers: GestureHandlers<TContext>
+      handlers: GestureHandlers<TContext>,
+      dependencies?: Dependencies,
     ): OnGestureEvent;
     export function useAnimatedScrollHandler<TContext extends Context>(
-      handler: ScrollHandler<TContext>
+      handler: ScrollHandler<TContext>,
+      dependencies?: Dependencies,
     ): OnScroll;
     export function useAnimatedScrollHandler<TContext extends Context>(
-      handlers: ScrollHandlers<TContext>
+      handlers: ScrollHandlers<TContext>,
+      dependencies?: Dependencies,
     ): OnScroll;
 
     export function useAnimatedRef<T extends Component>(): RefObject<T>;
diff --git a/node_modules/react-native-reanimated/src/createAnimatedComponent.js b/node_modules/react-native-reanimated/src/createAnimatedComponent.js
index 5df9340..c24ea77 100644
--- a/node_modules/react-native-reanimated/src/createAnimatedComponent.js
+++ b/node_modules/react-native-reanimated/src/createAnimatedComponent.js
@@ -132,7 +132,7 @@ export default function createAnimatedComponent(Component) {
             // event was in prev and is still in current props
             attached.add(prop.__nodeID);
           }
-        } else if (prop instanceof WorkletEventHandler) {
+        } else if (prop instanceof WorkletEventHandler && prop.reattachNeeded) {
           prop.unregisterFromEvents();
         }
       }
@@ -141,8 +141,9 @@ export default function createAnimatedComponent(Component) {
         if (prop instanceof AnimatedEvent && !attached.has(prop.__nodeID)) {
           // not yet attached
           prop.attachEvent(node, key);
-        } else if (prop instanceof WorkletEventHandler) {
+        } else if (prop instanceof WorkletEventHandler && prop.reattachNeeded) {
           prop.registerForEvents(viewTag, key);
+          prop.reattachNeeded = false;
         }
       }
     }
